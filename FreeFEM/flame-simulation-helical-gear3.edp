// simulation of heating and cooling with flame

load "msh3"
load "medit"
include "WriteGmshFile.edp"

mesh3 Th3corona=readmesh3("gear-2019.mesh");

//medit("Heating: Final Temperature", Th3corona);

real rho=7.653e3;//Density of steel
real calorespecifico=5.54e2;// Specific heat of steel
real aconductermica=34.28;//Thermal conductividad of steel 

real rhoce1 = 1./(rho*calorespecifico);
 // Some steel contants
  
  real As=730.+273;
  real cm=1.4;
  real Ms=360.+273;
    
  real Latencia=8.2e4;//Latent heat
  real alpha = 6.6*10.^3;	 // Transfer coefficient
  real uaqua=273+45.; // Aquaquenching/diving Temperature    


//Numerical simulation

//func uinitial = 300.+0.5*(x^2+y^2)*1000;
func uinitial = 300.;
real Tc=10., Tfinal=Tc+12.;
int Mparts=800; //number of subdivisions of [0,Tc]
real dt=Tc/Mparts;
real dtn;

fespace Vh(Th3corona,P13d);

Vh u, vh, wh, uu, flamet;

//func real flame(real tt){real alfa=50.; 
//	return 300.+900.*alfa*tt/(1.+alfa*tt);
//func real flame(real tt){real alfa=0.01; 
//	return 300.+800.*alfa*tt^2/2;}
	//Dirichlet boundary condition 
                //on the tooth surface
                         
func real flame(real t) {
	return (300. + 1000.*(t/3.)^0.333)*(t<3)
	     + (1300. - 250.*(abs(t-3.)/(Tc-3.))^0.333)*(t>=3);
} // temperatura de llama sobre los dientes
                         
uu = uinitial; //U^{n}-> uu
u = uu;        //U^{n+1}->u

  // Funcion temporal, a determinar segun el acero 
  
 func real ta(real temp)
  {
 return 
 1*(temp<=1003.)+
 (1.-0.008*(-1003.+temp))*(1003.<temp && temp<=1103.)+
 (0.2-0.00214286*(-1103.+temp))*(1103.<temp && temp<=1173.)+
 0.05*(temp>1173);
  }
   

  // Funcion de "equilibrio" para la austenita, a determinar segn el acero
  
  func real aeq(real temp)
  {
 return
 (1./110*(-1003.+temp))*(1003.<temp && temp<=1113.)+1.*(temp>1113);
  }
    
  real deltaheavy = .25;
  func real heavydelta(real t){
 return (t>deltaheavy)*((t-deltaheavy)/deltaheavy*(t<2*deltaheavy)+(t>=2*deltaheavy));}
  
  func real fm(real temp, real austen, real martens,  real temp1)
  {
 return cm*austen*(Ms-temp>0)*heavydelta(temp1-temp);
  }
  func real fa(real temp, real a, real martens, real temp1)
  {
 return max((aeq(temp)-a)/ta(temp),0.)*(temp-As>0)-fm(temp,a,martens,temp1);
  }
  
  
  // Las funciones austenita y martensita para que entren en el problema variacional se declaran como funciones de malla
  
  //  Initialization of the phase fractions
    
  Vh aa0=0., aa=aa0;
  Vh m0=0., mm=m0, mmm;  
  Vh Source;
    
  Vh fmm, fmmm, faa, faaa;
   
 //////////////////////////////////////////////////////
//func real pasoc(real tt){return tt;} //paso constante
func real pasoc(real tt){return tt^2/Tc;} // paso variable en tiempo para la etapa de calentamiento

/*
/// Prueba con una solucion exacta:
func real exactsol(real xx,real yy,real zz,real tt){300. + 600*tt*(xx^2+yy^2)+100*z^4;}

func real Dalembertexactsol(real xx,real yy,real zz,real tt){600.*rho*calorespecifico*(xx^2+yy^2)-aconductermica*(2400*t+1200*z^2);}
*/
///

problem heat(wh,vh,solver=CG,eps=1e-20)= 
   int3d(Th3corona)(wh*vh)
   +int3d(Th3corona)(0.5*dtn*rhoce1*aconductermica
    *(dx(wh)*dx(vh)+dy(wh)*dy(vh)+dz(wh)*dz(vh)))
  -int3d(Th3corona)(Source*vh) 
  + on(78,wh=flamet);
//  + on(78,wh=flamet+0.5*(x^2+y^2)*1000);
//  + on(76,77,78,79,wh=flamet);

real tcertain=0.;

for (int j=0; j<Mparts; ++j)
   {real time=j*dt;
	dtn = pasoc(time+dt)-pasoc(time); //paso variable 
    tcertain +=dtn;
  
  	faa  = fa(u,aa,       mm,uu);
 	faaa = fa(u,aa+dtn*faa,mm,uu);
	aa=aa+0.5*dtn*(faa+faaa);
    aa=max(min(aa,1.),0.); //truncation of the austenite 
                           //at height 1 and base 0.
    real ausMin = aa[].min;
 	real ausMax = aa[].max;
    real faaMin = faa[].min;
 	real faaMax = faa[].max;
    real faaaMin = faaa[].min;
 	real faaaMax = faaa[].max;
 	cout<<"t="<<tcertain<<
 	      ",  Austenite: "<<ausMin<<",  "<<ausMax<<
 	      ",  fa: "<<faaMin<<
 	      ",  fa: "<<faaMax<<
 	      ",  faa: "<<faaaMin<<
 	      ",  faa: "<<faaaMax<<endl;

   Source = 
   -0.5*dtn*rho*Latencia*0.5*(faa+faaa)*rhoce1
             + u;
  cout<<"Source min:"<<Source[].min<<
  	      ", Source max:"<<Source[].max<<endl;
            
   flamet=0.5*(flame(tcertain)
              +flame(tcertain-dtn));
   
   heat;
   uu = u;
   real umin=u[].min;
   u= max(2.*wh - uu,umin);
//   u= 2.*wh - uu;
  	cout<<"Temperature min:"<<u[].min<<
  	      ", Temperature max:"<<u[].max<<endl;

  
/*   if (abs(tcertain-2.5)<0.09) {medit("Austenite-t=2.5", Th3corona, aa, order=1);}
   if (abs(tcertain-4.5)<0.09) {medit("Austenite-t=4.5", Th3corona, aa, order=1);}*/
	}

medit("Heating: Final Temperature", Th3corona, uu, order=1);
medit("Heating: Final Austenite", Th3corona, aa, order=1);


WriteGmshFile("flame-temperature10-2019.msh", "Heating: Final Temperature", uu[], Th3corona, Vh); 
WriteGmshFile("flame-austenite10-2019.msh", "Heating: Final Austenite", aa[], Th3corona, Vh); 

  problem coolingdown(wh,vh) = int3d(Th3corona)(wh*vh + 0.5*dtn*aconductermica*rhoce1*(dx(wh)*dx(vh) + dy(wh)*dy(vh) +dz(wh)*dz(vh)))
          + int2d(Th3corona,76,77,78,79)(0.5*dtn*alpha*rhoce1*wh*vh)
          - int2d(Th3corona,76,77,78,79)(0.5*dtn*alpha*uaqua*rhoce1*vh)
          - int3d(Th3corona)(Source*vh);
  
func real pasocooling(real tt){return (tt-Tc)^2/(Tfinal-Tc);} // 

dt=(Tfinal-Tc)/Mparts;

for(real t=Tc;t<=Tfinal;t+=dt) {
	dtn=pasocooling(t+dt)-pasocooling(t);
  	faa  = fa(u,aa,       mm,uu);
 	faaa = fa(u,aa+dtn*faa,mm,uu);
	
	aa=aa+dtn/2.*(faa+faaa);
    aa=max(min(aa,1.),0.); // truncamiento de austenita a la altura 1.

  	fmm  = fm(u,aa,mm,        uu);
 	fmmm = fm(u,aa,mm+dtn*fmm,uu);
	
	mm=mm+dtn/2.*(fmm+fmmm);
    mm=max(min(mm,1.),0.); // martensite truncation at height 1.

    Source = -0.25*dtn*rho*Latencia*rhoce1*(faa+faaa + fmm+fmmm) + u;
 
    coolingdown;
    uu = u;
    u = max(2*wh - uu,uaqua);
 	           
  	real ausMin = aa[].min;
 	real ausMax = aa[].max;
  	real marMin = mm[].min;
 	real marMax = mm[].max;
 	cout<<"t="<<t<<",  Austenite: "<<ausMin<<",  "<<ausMax<<",  Martensite: "<<marMin<<",  "<<marMax<<endl;
}

medit("Cooling: Final Temperature", Th3corona, u, order=1);
medit("Cooling: Final Austenite", Th3corona, aa, order=1);
medit("Cooling: Final Martensite", Th3corona, mm, order=1);

WriteGmshFile("flame-temperature22-2019.msh", "Heating: Final Temperature", u[], Th3corona, Vh); 
WriteGmshFile("flame-austenite22-2019.msh", "Heating: Final Austenite", aa[], Th3corona, Vh); 
WriteGmshFile("flame-martensite22-2019.msh", "Heating: Final Martensite", mm[], Th3corona, Vh); 

